name: Build Docker Images and Create Release

on:
  push:
    tags: [ 'v*.*.*' ]
  workflow_dispatch:  # 允许手动触发构建

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels)
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker images
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate artifact attestation
      if: github.event_name != 'pull_request'
      uses: actions/attest-build-provenance@v1
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

  release:
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Generate changelog
      id: changelog
      run: |
        # 获取上一个标签
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        
        # 生成变更日志
        if [ -z "$PREVIOUS_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges $PREVIOUS_TAG..HEAD)
        fi
        
        # 输出到 GitHub Actions
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: MDX Server ${{ github.ref_name }}
        body: |
          ## 🚀 MDX Server ${{ github.ref_name }}
          
          ### 📦 Docker 镜像
          
          **GitHub Container Registry**:
          ```bash
          docker pull ghcr.io/${{ github.repository }}:${{ github.ref_name }}
          docker pull ghcr.io/${{ github.repository }}:latest
          ```
          
          ### 🔧 快速启动
          
          1. 创建配置和词典目录:
          ```bash
          mkdir dict
          # 将 .mdx 和 .mdd 文件放入 dict/ 目录
          ```
          
          2. 创建 docker-compose.yml:
          ```yaml
          services:
            mdx-server:
              image: ghcr.io/${{ github.repository }}:${{ github.ref_name }}
              container_name: mdx-server
              ports:
                - "8000:8000"
              volumes:
                - ./dict:/dict
                - ./config.json:/app/config.json
                - ./logs:/app/logs
              restart: unless-stopped
          ```
          
          3. 启动服务:
          ```bash
          docker-compose up -d
          ```
          
          ### 📋 本版本更新
          
          ${{ steps.changelog.outputs.changelog }}
          
          ### 🔗 相关链接
          
          - 📖 [使用文档](https://github.com/${{ github.repository }}#readme)
          - 📦 [GitHub Packages](https://github.com/${{ github.repository }}/pkgs/container/mdx-server)
        draft: false
        prerelease: ${{ contains(github.ref_name, '-') }}